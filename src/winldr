
function split(pString, pPattern)
   local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pPattern
   local last_end = 1
   local s, e, cap = pString:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
		table.insert(Table,cap)
      end
      last_end = e+1
      s, e, cap = pString:find(fpat, last_end)
   end
   if last_end <= #pString then
      cap = pString:sub(last_end)
      table.insert(Table, cap)
   end
   return Table
end

function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end

function string.ends(String,End)
   return End=='' or string.sub(String,-string.len(End))==End
end






function ini_read(fileName)
	local result = {}

	if string.starts(fileName, "home:/") then
		fileName = string.gsub(fileName, "home:/", "", 1)
	end

	if fs.exists(fileName) then
		local file = fs.open(fileName, "r")
		local data = file.readAll()
		file.close()

		data = string.gsub(data, "\r", "")
		local lines = split(data, "\n")
		local cat = "*"

		for i, v in ipairs(lines) do
			if (string.len(v) > 0) and (not string.starts(v, ";")) then
				if string.starts(v, "[") and string.ends(v, "]") then
					local catName = string.gsub(v, "%[", "")
					catName = string.gsub(catName, "%]", "")
					cat = catName
				else
					if string.find(v, "=") then
						local values = split(v, "=")

						if string.ends(values[1], " ") then
							repeat
								values[1] = string.sub(values[1], 1, string.len(values[1]) - 1)
							until not (string.ends(values[1], " "))
						end

						if string.starts(values[2], " ") then
							repeat
								values[2] = string.sub(values[2], 2, string.len(values[2]))
							until not (string.starts(values[2], " "))
						end

						if result[cat] == nil then result[cat] = {} end
						if result[cat][values[1]] == nil then result[cat][values[1]] = {} end
						result[cat][values[1]] = values[2]
					end
				end
			end
		end

		return result
	end
end


if fs.exists(".reboot") then
	local file = fs.open(".reboot", "r")

	if file ~= nil then
		local command = file.readAll()
		file.close()
		fs.delete(".reboot")

		if command == "LOADTO CRAFTOS" then
			return 0
		end
	end
else
	local config = ini_read("boot.ini")
	local kernel = config.boot.path or "/"
	local selectedIndex = 1
	local timer = 10
	local running = true
	local len = 0

	if type(config.loader) ~= "table" then len = 0 else
		for k, v in pairs(config.loader) do
			len = len + 1
		end
	end



	if len > 1 then
		term.setBackgroundColor(colors.black)
		term.setTextColor(colors.white)
		term.clear()
		term.setCursorPos(1, 1)
		term.setCursorBlink(true)
		os.startTimer(0)

		local t = {}

		if config ~= nil then
			for k, v in pairs(config.loader) do
				term.clearLine()
				table.insert(t, k)
			end
		end


		while running do
			local event, key = os.pullEvent()

			if event == "timer" then
				timer = timer - 1
				os.startTimer(1)
			end

			if event == "key" then
				timer = -9

				if key == 200 then
					if selectedIndex > 1 then selectedIndex = selectedIndex - 1 end
				end

				if key == 208 then
					if selectedIndex < len then selectedIndex = selectedIndex + 1 end
				end

				if key == 28 then
					term.clear()
					term.setCursorPos(1, 1)
					term.setBackgroundColor(colors.black)
					term.setTextColor(colors.white)
					term.clear()

					if t[selectedIndex] == "%VERSION%" then
						return 0
					else
						shell.run(config.loader[t[selectedIndex]] .. " \"" .. kernel .. "\"")
					end
				end
			end


			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.white)
			term.setCursorPos(1, 3)
			term.setCursorBlink(false)
			print("Please select the operating system to start:")
			print("")
			print("")

			for k, v in pairs(config.loader) do
				term.clearLine()
				print("    " .. string.gsub(k, "%%VERSION%%", os.version()))
			end

			print("")
			print("")
			print("Use the up and down keys to move the hightlight to your choice.")
			print("Press ENTER to choose.")
			print("")

			if timer > 0 then
				print("Seconds until the hightlighted system will be started: " .. timer)
			elseif timer == 0 then
				term.clear()
				term.setCursorPos(1, 1)

				if t[selectedIndex] == "%VERSION%" then
					shell.run(config.loader[t[selectedIndex]])
				else
					os.run({}, config.loader[t[selectedIndex]], kernel)
				end
			else
				print(string.rep(" ", term.getSize()))
				print(string.rep(" ", term.getSize()))
			end

			term.setCursorPos(1, 5 + selectedIndex)
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			term.clearLine()
			term.write("    " .. string.gsub(t[selectedIndex], "%%VERSION%%", os.version()))
		end
	elseif len == 1 then
		for k, v in pairs(config.loader) do
			if k == "%VERSION%" then
				shell.run(v)
			else
				os.run(getfenv(), v, kernel)
			end
		end
	else
		term.clear()
		term.setCursorPos(1, 1)
		print("LOADER section in BOOT.INI is empty - launching default shell...")
		os.sleep(1)
		shell.run("shell")
	end


	return 0
end
